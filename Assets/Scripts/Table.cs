// This code automatically generated by TableCodeGen
using UnityEngine;
using System.Collections;
using System.Collections.Generic;

public class Table: MonoBehaviour
{
	public TextAsset file;

    private void Start()
    {
		Load(file);
		Debug.Log(Find_eName("Earth").mass_kg);
    }

    public class Row
	{
		public string eName;
		public string isPlanet;
		public string semimajorAxis;
		public string perihelion;
		public string aphelion;
		public string eccentricity;
		public string inclination;
		public string density;
		public string gravity;
		public string escape;
		public string meanRadius;
		public string equaRadius;
		public string polarRadius;
		public string flattening;
		public string dimension;
		public string sideralOrbit;
		public string sideralRotation;
		public string discoveryDate;
		public string mass_kg;
		public string volume;
		public string orbit_type;
		public string orbits;
		public string bondAlbido;
		public string geomAlbido;
		public string RV_abs;
		public string p_transit;
		public string transit_visibility;
		public string transit_depth;
		public string massj;
		public string semimajorAxis_AU;
		public string grav_int;

	}

	List<Row> rowList = new List<Row>();
	bool isLoaded = false;

	public bool IsLoaded()
	{
		return isLoaded;
	}

	public List<Row> GetRowList()
	{
		return rowList;
	}

	public void Load(TextAsset csv)
	{
		rowList.Clear();
		string[][] grid = CsvParser2.Parse(csv.text);
		for (int i = 1; i < grid.Length; i++)
		{
			Row row = new Row();
			row.eName = grid[i][0];
			row.isPlanet = grid[i][1];
			row.semimajorAxis = grid[i][2];
			row.perihelion = grid[i][3];
			row.aphelion = grid[i][4];
			row.eccentricity = grid[i][5];
			row.inclination = grid[i][6];
			row.density = grid[i][7];
			row.gravity = grid[i][8];
			row.escape = grid[i][9];
			row.meanRadius = grid[i][10];
			row.equaRadius = grid[i][11];
			row.polarRadius = grid[i][12];
			row.flattening = grid[i][13];
			row.dimension = grid[i][14];
			row.sideralOrbit = grid[i][15];
			row.sideralRotation = grid[i][16];
			row.discoveryDate = grid[i][17];
			row.mass_kg = grid[i][18];
			row.volume = grid[i][19];
			row.orbit_type = grid[i][20];
			row.orbits = grid[i][21];
			row.bondAlbido = grid[i][22];
			row.geomAlbido = grid[i][23];
			row.RV_abs = grid[i][24];
			row.p_transit = grid[i][25];
			row.transit_visibility = grid[i][26];
			row.transit_depth = grid[i][27];
			row.massj = grid[i][28];
			row.semimajorAxis_AU = grid[i][29];
			row.grav_int = grid[i][30];

			rowList.Add(row);
		}
		isLoaded = true;
	}

	public int NumRows()
	{
		return rowList.Count;
	}

	public Row GetAt(int i)
	{
		if (rowList.Count <= i)
			return null;
		return rowList[i];
	}

	public Row Find_eName(string find)
	{
		return rowList.Find(x => x.eName == find);
	}
	public List<Row> FindAll_eName(string find)
	{
		return rowList.FindAll(x => x.eName == find);
	}
	public Row Find_isPlanet(string find)
	{
		return rowList.Find(x => x.isPlanet == find);
	}
	public List<Row> FindAll_isPlanet(string find)
	{
		return rowList.FindAll(x => x.isPlanet == find);
	}
	public Row Find_semimajorAxis(string find)
	{
		return rowList.Find(x => x.semimajorAxis == find);
	}
	public List<Row> FindAll_semimajorAxis(string find)
	{
		return rowList.FindAll(x => x.semimajorAxis == find);
	}
	public Row Find_perihelion(string find)
	{
		return rowList.Find(x => x.perihelion == find);
	}
	public List<Row> FindAll_perihelion(string find)
	{
		return rowList.FindAll(x => x.perihelion == find);
	}
	public Row Find_aphelion(string find)
	{
		return rowList.Find(x => x.aphelion == find);
	}
	public List<Row> FindAll_aphelion(string find)
	{
		return rowList.FindAll(x => x.aphelion == find);
	}
	public Row Find_eccentricity(string find)
	{
		return rowList.Find(x => x.eccentricity == find);
	}
	public List<Row> FindAll_eccentricity(string find)
	{
		return rowList.FindAll(x => x.eccentricity == find);
	}
	public Row Find_inclination(string find)
	{
		return rowList.Find(x => x.inclination == find);
	}
	public List<Row> FindAll_inclination(string find)
	{
		return rowList.FindAll(x => x.inclination == find);
	}
	public Row Find_density(string find)
	{
		return rowList.Find(x => x.density == find);
	}
	public List<Row> FindAll_density(string find)
	{
		return rowList.FindAll(x => x.density == find);
	}
	public Row Find_gravity(string find)
	{
		return rowList.Find(x => x.gravity == find);
	}
	public List<Row> FindAll_gravity(string find)
	{
		return rowList.FindAll(x => x.gravity == find);
	}
	public Row Find_escape(string find)
	{
		return rowList.Find(x => x.escape == find);
	}
	public List<Row> FindAll_escape(string find)
	{
		return rowList.FindAll(x => x.escape == find);
	}
	public Row Find_meanRadius(string find)
	{
		return rowList.Find(x => x.meanRadius == find);
	}
	public List<Row> FindAll_meanRadius(string find)
	{
		return rowList.FindAll(x => x.meanRadius == find);
	}
	public Row Find_equaRadius(string find)
	{
		return rowList.Find(x => x.equaRadius == find);
	}
	public List<Row> FindAll_equaRadius(string find)
	{
		return rowList.FindAll(x => x.equaRadius == find);
	}
	public Row Find_polarRadius(string find)
	{
		return rowList.Find(x => x.polarRadius == find);
	}
	public List<Row> FindAll_polarRadius(string find)
	{
		return rowList.FindAll(x => x.polarRadius == find);
	}
	public Row Find_flattening(string find)
	{
		return rowList.Find(x => x.flattening == find);
	}
	public List<Row> FindAll_flattening(string find)
	{
		return rowList.FindAll(x => x.flattening == find);
	}
	public Row Find_dimension(string find)
	{
		return rowList.Find(x => x.dimension == find);
	}
	public List<Row> FindAll_dimension(string find)
	{
		return rowList.FindAll(x => x.dimension == find);
	}
	public Row Find_sideralOrbit(string find)
	{
		return rowList.Find(x => x.sideralOrbit == find);
	}
	public List<Row> FindAll_sideralOrbit(string find)
	{
		return rowList.FindAll(x => x.sideralOrbit == find);
	}
	public Row Find_sideralRotation(string find)
	{
		return rowList.Find(x => x.sideralRotation == find);
	}
	public List<Row> FindAll_sideralRotation(string find)
	{
		return rowList.FindAll(x => x.sideralRotation == find);
	}
	public Row Find_discoveryDate(string find)
	{
		return rowList.Find(x => x.discoveryDate == find);
	}
	public List<Row> FindAll_discoveryDate(string find)
	{
		return rowList.FindAll(x => x.discoveryDate == find);
	}
	public Row Find_mass_kg(string find)
	{
		return rowList.Find(x => x.mass_kg == find);
	}
	public List<Row> FindAll_mass_kg(string find)
	{
		return rowList.FindAll(x => x.mass_kg == find);
	}
	public Row Find_volume(string find)
	{
		return rowList.Find(x => x.volume == find);
	}
	public List<Row> FindAll_volume(string find)
	{
		return rowList.FindAll(x => x.volume == find);
	}
	public Row Find_orbit_type(string find)
	{
		return rowList.Find(x => x.orbit_type == find);
	}
	public List<Row> FindAll_orbit_type(string find)
	{
		return rowList.FindAll(x => x.orbit_type == find);
	}
	public Row Find_orbits(string find)
	{
		return rowList.Find(x => x.orbits == find);
	}
	public List<Row> FindAll_orbits(string find)
	{
		return rowList.FindAll(x => x.orbits == find);
	}
	public Row Find_bondAlbido(string find)
	{
		return rowList.Find(x => x.bondAlbido == find);
	}
	public List<Row> FindAll_bondAlbido(string find)
	{
		return rowList.FindAll(x => x.bondAlbido == find);
	}
	public Row Find_geomAlbido(string find)
	{
		return rowList.Find(x => x.geomAlbido == find);
	}
	public List<Row> FindAll_geomAlbido(string find)
	{
		return rowList.FindAll(x => x.geomAlbido == find);
	}
	public Row Find_RV_abs(string find)
	{
		return rowList.Find(x => x.RV_abs == find);
	}
	public List<Row> FindAll_RV_abs(string find)
	{
		return rowList.FindAll(x => x.RV_abs == find);
	}
	public Row Find_p_transit(string find)
	{
		return rowList.Find(x => x.p_transit == find);
	}
	public List<Row> FindAll_p_transit(string find)
	{
		return rowList.FindAll(x => x.p_transit == find);
	}
	public Row Find_transit_visibility(string find)
	{
		return rowList.Find(x => x.transit_visibility == find);
	}
	public List<Row> FindAll_transit_visibility(string find)
	{
		return rowList.FindAll(x => x.transit_visibility == find);
	}
	public Row Find_transit_depth(string find)
	{
		return rowList.Find(x => x.transit_depth == find);
	}
	public List<Row> FindAll_transit_depth(string find)
	{
		return rowList.FindAll(x => x.transit_depth == find);
	}
	public Row Find_massj(string find)
	{
		return rowList.Find(x => x.massj == find);
	}
	public List<Row> FindAll_massj(string find)
	{
		return rowList.FindAll(x => x.massj == find);
	}
	public Row Find_semimajorAxis_AU(string find)
	{
		return rowList.Find(x => x.semimajorAxis_AU == find);
	}
	public List<Row> FindAll_semimajorAxis_AU(string find)
	{
		return rowList.FindAll(x => x.semimajorAxis_AU == find);
	}
	public Row Find_grav_int(string find)
	{
		return rowList.Find(x => x.grav_int == find);
	}
	public List<Row> FindAll_grav_int(string find)
	{
		return rowList.FindAll(x => x.grav_int == find);
	}

}
